datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String   @id @default(cuid())
  discordId     String   @unique
  discordTag    String
  walletAddress String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subscriptions Subscription[]
  mintAttempts  MintAttempt[]
  walletSessions WalletSession[]
  nftHoldings   NftHolding[]
}

model Subscription {
  id              String            @id @default(cuid())
  userId          String
  subscriptionType SubscriptionType
  isActive        Boolean           @default(true)
  expiresAt       DateTime?
  mintsRemaining  Int               @default(0)
  maxMintsPerDay  Int               @default(10)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model NftHolding {
  id              String   @id @default(cuid())
  userId          String
  contractAddress String
  tokenId         String
  isVerified      Boolean  @default(false)
  mintsRemaining  Int      @default(3)
  lastChecked     DateTime @default(now())
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, contractAddress, tokenId])
}

model MintProject {
  id                String   @id @default(cuid())
  name              String
  contractAddress   String   @unique
  mintPrice         String
  maxSupply         Int
  currentSupply     Int      @default(0)
  mintFunction      String
  gasLimit          Int      @default(200000)
  isActive          Boolean  @default(true)
  requiresWhitelist Boolean  @default(false)
  mintStartTime     DateTime?
  mintEndTime       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  mintAttempts MintAttempt[]
}

model MintAttempt {
  id              String      @id @default(cuid())
  userId          String
  projectId       String
  walletAddress   String
  amount          Int
  txHash          String?
  status          MintStatus  @default(PENDING)
  gasPrice        String?
  gasUsed         String?
  errorMessage    String?
  queuePosition   Int?
  estimatedCost   String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  completedAt     DateTime?

  user User @relation(fields: [userId], references: [id])
  project MintProject @relation(fields: [projectId], references: [id])
}

model WalletSession {
  id            String   @id @default(cuid())
  userId        String
  walletAddress String
  signature     String
  nonce         String
  isActive      Boolean  @default(true)
  expiresAt     DateTime
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model BotSettings {
  id                    String   @id @default(cuid())
  maxConcurrentMints    Int      @default(50)
  maxQueueSize          Int      @default(1000)
  minBalanceBuffer      String   @default("100000000000000000")
  gasMultiplier         Float    @default(1.2)
  failureRemovalEnabled Boolean  @default(true)
  maintenanceMode       Boolean  @default(false)
  updatedAt             DateTime @updatedAt
}

enum SubscriptionType {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum MintStatus {
  PENDING
  QUEUED
  PROCESSING
  CONFIRMED
  FAILED
  CANCELLED
  INSUFFICIENT_FUNDS
}

model TwitterAccount {
  id              String   @id @default(cuid())
  twitterUserId   String   @unique
  accessToken     String
  refreshToken    String
  expiresAt       Int
  type            String
  createdAt       DateTime @default(now())

  links           TwitterLink[]
}

model TwitterLink {
  id              String   @id @default(cuid())
  discordUserId   String
  guildId         String
  twitterUserId   String
  type            String
  createdAt       DateTime @default(now())

  twitterAccount  TwitterAccount @relation(fields: [twitterUserId], references: [twitterUserId])

  @@unique([discordUserId, guildId])
}

model SnipeLog {
  id            String   @id @default(cuid())
  userId        String
  tokenAddress  String
  amount        Float
  txHash        String
  status        String   // "success" | "fail"
  executedAt    DateTime
}

model TokenCall {
  id            String   @id @default(cuid())
  tokenAddress  String
  tokenSymbol   String?
  discordUserId String
  guildId       String
  channelId     String
  fdv           Float?
  volume        Float?
  ath           Float?
  currentPrice  Float?
  ageMinutes    Int?
  lp            Float?
  status        String   // "called" | "deleted" | "executed"
  createdAt     DateTime @default(now())
}

model GuildConfig {
  id           String   @id @default(cuid())
  guildId      String   @unique
  adminRoleIds String[] @default([])
  modRoleIds   String[] @default([])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}